import { DataSource } from 'typeorm';
import { SeedContext } from '../../scripts/seed';
import { Task } from '../../src/tasks/task.entity';
import { TaskLabel } from '../../src/tasks/task-label.entity';
import { User } from '../../src/users/user.entity';
import { pickEnumValue } from './_utils';

export default async function seedTasks(ds: DataSource, ctx: SeedContext) {
  const count = ctx.TASKS;
  if (!count) return;

  const repo = ds.getRepository(Task);
  const userRepo = ds.getRepository(User);
  const labelRepo = ds.getRepository(TaskLabel);

  const cols = repo.metadata.columns.map(c => c.propertyName);
  const rels = repo.metadata.relations.map(r => r.propertyName);
  const table = repo.metadata.tableName;

  const statusVal = cols.includes('status')
    ? await pickEnumValue(ds, table, 'status', ['open','todo','new','created'])
    : undefined;
  const priorityVal = cols.includes('priority')
    ? await pickEnumValue(ds, table, 'priority', ['normal','medium','low'])
    : undefined;

  const users = await userRepo.find();
  const labels = await labelRepo.find();

  const items: any[] = [];
  for (let i = 0; i < count; i++) {
    const t: any = {};
    if (cols.includes('title')) t.title = `E2E Task #${i+1}`;
    if (cols.includes('name') && !cols.includes('title')) t.name = `E2E Task #${i+1}`;
    if (cols.includes('description')) t.description = 'Generated by e2e seeder';

    if (statusVal !== undefined) t.status = statusVal;
    if (priorityVal !== undefined) t.priority = priorityVal;

    if (cols.includes('createdAt')) t.createdAt = new Date();
    if (cols.includes('updatedAt')) t.updatedAt = new Date();

    const u = users.length ? users[i % users.length] : undefined;
    if (u) {
      if (rels.includes('user')) t.user = u;
      if (cols.includes('userId')) t.userId = (u as any).id;
    }

    if (rels.includes('labels') && labels.length) {
      t.labels = labels.slice(0, Math.min(2, labels.length));
    }

    items.push(t);
  }

  await repo.save(items, { chunk: 50 });
  console.log(`[seed/tasks] inserted: ${items.length}`);
}
